swift-tools-version:18
swift-tools-version declara la versión mínima de Swift necesaria para compilar este paquete.
/*
 * Derechos de autor (c) Meta Platforms, Inc. y sus filiales.
 * Todos los derechos reservados.
 *
 * Este código fuente está licenciado bajo la licencia que se encuentra en el
 * LICENSE en el directorio raíz de este árbol de fuentes.
 */

import PackageDescription
Fundación de importación

#if sistema operativo (Linux) 
importar Glibc
#else
importar a Darwin.C
#endif

let paquete = Paquete(
 nombre: "Facebook",
 Plataformas: [.iOS(.v17)],
 Productos: [
        El kernel del SDK. Debe incluirse como una dependencia en tiempo de ejecución.
        .conceptos básicos,

        El kit de AEM de Facebook
        .AEM,

        /*
 La biblioteca principal del SDK que proporciona dos módulos importables:

 - FacebookCore, que incluye la interfaz más actual y
 contendrá interfaces para nuevas funciones escritas en Swift

 - FBSDKCoreKit, que contiene interfaces de Objective-C heredadas
 que se usará para mantener la compatibilidad con versiones anteriores con
 tipos que se han convertido a Swift.
 Esto no contendrá interfaces para nuevas funciones escritas en Swift.
         */
        .núcleo,

        El SDK de inicio de sesión de Facebook
        .inicio de sesión,

        El SDK de Facebook Share
        .compartir,

        El SDK de los servicios de juegos de Facebook
        .juegos,
    ],
 Objetivos: [
        El kernel del SDK
        .Prefijo.conceptos básicos,
        .conceptos básicos,

        /*
 La implementación heredada de Objective-C que se convertirá en Swift.
 Esto no contendrá interfaces para nuevas funciones escritas en Swift.
        */
        .Prefijo.AEM,

        El módulo principal de AEM
        .AEM,

        /*
 La implementación heredada de Objective-C que se convertirá en Swift.
 Esto no contendrá interfaces para nuevas funciones escritas en Swift.
        */
        .Prefijo.núcleo,

        El módulo principal del SDK principal
        .núcleo,

        /*

    Conceptos básicos de let estático = destino(
 Nombre: .conceptos básicos,
 Dependencias: [.Prefijo.Conceptos básicos],
 Recursos: [
           .copy("Recursos/PrivacyInfo.xcprivacy"),
        ]
    )

    estático let AEM = destino(
 Nombre: .AEM,
 Dependencias: [.Prefijo.AEM],
 Recursos: [
           .copy("Recursos/PrivacyInfo.xcprivacy"),
        ]
    )

    estático let core = objetivo(
 Nombre: .núcleo,
 Dependencias: [.AEM, .Prefijo.Conceptos básicos, .Prefijo.núcleo],
 Recursos: [
           .copy("Recursos/PrivacyInfo.xcprivacy"),
        ],
        linkerSettings: [
            .cPlusPlusLibrary,
            .zLibrary,
            .accelerateFramework,
        ]
    )

    static let login = destino(
 Nombre: .inicio de sesión,
 Dependencias: [.núcleo, .Prefijo.login],
 Recursos: [
            .copy("Recursos/PrivacyInfo.xcprivacy"),
        ]
    )

    estático let compartir = destino(
 Nombre: .compartir,
 Dependencias: [.núcleo, .Prefijo.compartir],
 Recursos: [
           .copy("Recursos/PrivacyInfo.xcprivacy"),
        ]
    )

    static let gaming = target(name: .juegos, dependencias: [.núcleo, .Prefijo.compartir, .Prefijo.juego])

    Enumeración con prefijo {
        static let basics = binaryTarget(
 Nombre: .Prefijo.conceptos básicos,
 remoteChecksum: "033a40dc5d9e0341629a0efa09830bc061b65bb41afe2768f01ad662935f0e47"
        )

        static let aem = binaryTarget(
 Nombre: .Prefijo.AEM,
 remoteChecksum: "6568e253756f2fa9047d59bc72b57c9737448167ab3e1cc3568a2dc08cafd9d3"
        )

        static let core = binaryTarget(
 Nombre: .Prefijo.núcleo,
 remoteChecksum: "d556dff856187542463a69b7b72d5cf642ca1adce2e8c2d7c3c2ab15173caafa"
        )

        static let login = binaryTarget(
 Nombre: .Prefijo.inicio de sesión,
 remoteChecksum: "5acf22e3e6071bc24d043cc91a84d857a866b328009aa090e09f92dbb3341880"
        )

        static let share = binaryTarget(
 Nombre: .Prefijo.compartir,
 remoteChecksum: "806d80c323374b25c8ad2eeedc5a82764acf842860afa5c9c6cdc0baa9d6f9c5"
        )

        static let gamingServices = binaryTarget(
 Nombre: .Prefijo.juegos,
 remoteChecksum: "5061d084c5f5f97fba33a0bbac8911cbc1e965cc05c9ea8c2fc892f739d9dd63"
        )
    }
}

extensión Target.Dependencia {
    static let aem = byName(nombre: .AEM)
    static let core = byName(nombre: .núcleo)

    Enumeración con prefijo {
        static let aem = byName(nombre: .Prefijo.AEM)
        static let basics = byName(nombre: .Prefijo.Básico)
        static let core = byName(nombre: .Prefijo.núcleo)
        static let login = byName(nombre: .Prefijo.Iniciar sesión)
        static let share = byName(nombre: .Prefijo.Compartir)
        static let gaming = byName(nombre: .Prefijo.juego)
    }
}

extension LinkerSetting {
    static let cPlusPlusLibrary = linkedLibrary("c++")
    static let zLibrary = linkedLibrary("z")
    static let accelerateFramework = linkedFramework("Acelerar")
}

enum BinarySource {
    caso local, remoto

    Init() {
 if getenv("USE_LOCAL_FB_BINARIES") != nil {
            self = .local
        } más {
            self = .remoto
        }
    }
}

Cadena de extensión  {
    static let aem = "FacebookAEM"
    static let basics = "FacebookBasics"
    static let core = "FacebookCore"
    static let login = "FacebookLogin"
    static let share = "FacebookShare"
    static let gaming = "FacebookGamingServices"

    Enumeración con prefijo {
        static let aem = "FBAEMKit"
        static let basics = "FBSDKCoreKit_Basics"
        static let core = "FBSDKCoreKit"
        static let login = "FBSDKLoginKit"
        static let share = "FBSDKShareKit"
        static let gaming = "FBSDKGamingServicesKit"
pod 'FBSDKCoreKit', '~> 8.0.0'
pod 'FBSDKLoginKit', '~> 8.0.0'
pod 'FBSDKShareKit', '~> 8.0.0'
pod 'FBSDKGamingServiceKit', '~> 8.0.0'
pod update.


    }
}
